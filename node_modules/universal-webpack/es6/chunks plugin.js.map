{"version":3,"sources":["../source/chunks plugin.js"],"names":["ChunkFileNamesPlugin","configuration","options","prototype","apply","compiler","onDone","stats","writeChunkFileNames","hooks","done","tap","plugin","filename_info","json","assets_base_url","assets_by_chunk","assetsByChunkName","assets_chunks","javascript","styles","get_assets","name","extension","chunk","Array","isArray","filter","extname","split","map","forEach","style","webpack_configuration","toJson","context","process","cwd","chunkModules","silent","env","NODE_ENV","devServer","publicPath","output_file_path","chunk_info_filename","outputFileSync"],"mappings":"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","file":"chunks plugin.js","sourcesContent":["import path from 'path'\r\nimport fs   from 'fs-extra'\r\n\r\nimport output_webpack_stats from './output webpack stats'\r\nimport { chunk_info_file_path } from './chunks'\r\n\r\nexport default function ChunkFileNamesPlugin(configuration, options)\r\n{\r\n\tthis.configuration = configuration\r\n\tthis.options = options\r\n}\r\n\r\nChunkFileNamesPlugin.prototype.apply = function(compiler)\r\n{\r\n\tconst onDone = (stats) => writeChunkFileNames(stats, this.options, this.configuration)\r\n\r\n\t// Fixes \"DeprecationWarning: Tapable.plugin is deprecated. Use new API on `.hooks` instead\".\r\n\t// (backwards compatible)\r\n\tif (compiler.hooks) {\r\n\t\tcompiler.hooks.done.tap('UniversalWebpackChunkFileNamesPlugin', onDone)\r\n\t} else {\r\n\t\tcompiler.plugin('done', onDone)\r\n\t}\r\n}\r\n\r\n// Generates chunk filename info\r\n// (`assets_base_url` will be prepended to chunk file names)\r\nfunction filename_info(json, assets_base_url)\r\n{\r\n\tconst assets_by_chunk = json.assetsByChunkName\r\n\r\n\tconst assets_chunks =\r\n\t{\r\n\t\tjavascript: {},\r\n\t\tstyles: {}\r\n\t}\r\n\r\n\t// gets asset paths by name and extension of their chunk\r\n\tfunction get_assets(name, extension)\r\n\t{\r\n\t\tlet chunk = json.assetsByChunkName[name]\r\n\r\n\t\t// a chunk could be a string or an array, so make sure it is an array\r\n\t\tif (!(Array.isArray(chunk)))\r\n\t\t{\r\n\t\t\tchunk = [chunk]\r\n\t\t}\r\n\r\n\t\treturn chunk\r\n\t\t\t// filter by extension\r\n\t\t\t.filter(name => path.extname(name).split('?')[0] === `.${extension}`)\r\n\t\t\t// adjust the real path (can be http, filesystem)\r\n\t\t\t.map(name => assets_base_url + name)\r\n\t}\r\n\r\n\t// for each chunk name (\"main\", \"common\", ...)\r\n\tObject.keys(assets_by_chunk).forEach(function(name)\r\n\t{\r\n\t\t// log.debug(`getting javascript and styles for chunk \"${name}\"`)\r\n\r\n\t\t// get javascript chunk real file path\r\n\r\n\t\tconst javascript = get_assets(name, 'js')[0]\r\n\t\t// the second asset is usually a source map\r\n\r\n\t\tif (javascript)\r\n\t\t{\r\n\t\t\t// log.debug(` (got javascript)`)\r\n\t\t\tassets_chunks.javascript[name] = javascript\r\n\t\t}\r\n\r\n\t\t// get style chunk real file path\r\n\r\n\t\tconst style = get_assets(name, 'css')[0]\r\n\t\t// the second asset is usually a source map\r\n\r\n\t\tif (style)\r\n\t\t{\r\n\t\t\t// log.debug(` (got style)`)\r\n\t\t\tassets_chunks.styles[name] = style\r\n\t\t}\r\n\t})\r\n\r\n\treturn assets_chunks\r\n}\r\n\r\nfunction writeChunkFileNames(stats, options, webpack_configuration)\r\n{\r\n\tconst json = stats.toJson\r\n\t({\r\n\t\tcontext: webpack_configuration.context || process.cwd(),\r\n\r\n\t\t// Add built modules information to chunk information.\r\n\t\t// What for is it here? I don't know. It's a copy & paste from the Webpack author's code.\r\n\t\tchunkModules: true,\r\n\r\n\t\t// // The following modules will be excluded from Webpack stats Json file.\r\n\t\t// // What for is it here? I don't know. It's a copy & paste from the Webpack author's code.\r\n\t\t// exclude:\r\n\t\t// [\r\n\t\t// \t/node_modules[\\\\\\/]react(-router)?[\\\\\\/]/,\r\n\t\t// \t/node_modules[\\\\\\/]items-store[\\\\\\/]/\r\n\t\t// ]\r\n\t})\r\n\r\n\t// output some info to the console if in development mode\r\n\tif (!options.silent)\r\n\t{\r\n\t\t// outputs stats info to the console\r\n\t\t// (only needed in development mode)\r\n\t\toutput_webpack_stats(stats, json)\r\n\t}\r\n\r\n\t// \"publicPath\" (will be prepended to chunk file names)\r\n\tconst assets_base_url = (process.env.NODE_ENV !== 'production' && webpack_configuration.devServer && webpack_configuration.devServer.publicPath) ? webpack_configuration.devServer.publicPath : json.publicPath\r\n\r\n\t// chunk filename info file path\r\n\tconst output_file_path = chunk_info_file_path(webpack_configuration, options.chunk_info_filename)\r\n\r\n\t// Write chunk filename info to disk\r\n\tfs.outputFileSync(output_file_path, JSON.stringify(filename_info(json, assets_base_url)))\r\n}\r\n"]}