{"version":3,"sources":["../source/client configuration.js"],"names":["client_configuration","webpack_configuration","settings","options","configuration","plugins","push","silent","chunk_info_filename","css_bundle","cssBundle","css_bundle_filename","development","extract_css_plugin","create_extract_css_plugin","useMiniCssExtractPlugin","rule","style_loader","before_style_loader","use","slice","indexOf","after_style_loader","length","Error","inspect","generate_extract_css_loaders","MiniCssExtractPlugin","require","filename","ExtractTextPlugin","allChunks","extract_css_loaders","loader","extract_css_loader","extract","remove","Array","isArray"],"mappings":";;;;;;;;;;;;;;kBAawBA,oB;;AAbxB;;;;AAEA;;;;AACA;;AAEA;;;;AAQe,SAASA,oBAAT,CAA8BC,qBAA9B,EAAqDC,QAArD,EACf;AAAA,KAD8EC,OAC9E,uEADwF,EACxF;;AACC,KAAMC,gBAAgB,oBAAMH,qBAAN,CAAtB;;AAEAG,eAAcC,OAAd,GAAwBD,cAAcC,OAAd,IAAyB,EAAjD;;AAEAD,eAAcC,OAAd,CAAsBC,IAAtB;AAEC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAAkB,oBAAMF,aAAN,CAAlB,EAAwC,EAAEG,QAAQL,SAASK,MAAnB,EAA2BC,qBAAqBN,SAASM,mBAAzD,EAAxC,CAZD;;AAeA;;AAEA,KAAMC,aAAaN,QAAQM,UAAR,IAAsBN,QAAQO,SAAjD;;AAEA,KAAIC,sBAAsB,0BAA1B;;AAEA,KAAI,OAAOF,UAAP,KAAsB,QAA1B,EACA;AACCE,wBAAsBF,UAAtB;AACA;;AAED;AACA;AACA;AACA;AACA,KAAIN,QAAQS,WAAR,IAAuBH,UAA3B,EACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,qBAAqBC,0BAA0BH,mBAA1B,EAA+CR,QAAQY,uBAAvD,CAA3B;;AAEA;AACA,qDAAqCX,aAArC;;AAEA;AACA;AACA;AAlBD;AAAA;AAAA;;AAAA;AAmBC,mDAAmB,8BAAgBA,aAAhB,CAAnB,4GACA;AAAA,QADWY,IACX;;AACC,QAAMC,eAAe,0BAAYD,IAAZ,EAAkB,cAAlB,CAArB;;AAEA,QAAME,sBAAsBF,KAAKG,GAAL,CAASC,KAAT,CAAe,CAAf,EAAkBJ,KAAKG,GAAL,CAASE,OAAT,CAAiBJ,YAAjB,CAAlB,CAA5B;AACA,QAAMK,qBAAsBN,KAAKG,GAAL,CAASC,KAAT,CAAeJ,KAAKG,GAAL,CAASE,OAAT,CAAiBJ,YAAjB,IAAiC,CAAhD,CAA5B;;AAEA,QAAIC,oBAAoBK,MAApB,GAA6B,CAAjC,EACA;AACC,WAAM,IAAIC,KAAJ,CAAU,iEAAV,EAA6E,eAAKC,OAAL,CAAaT,IAAb,CAA7E,CAAN;AACA;;AAEDA,SAAKG,GAAL,GAAWO,6BAA6BJ,kBAA7B,EAAiDnB,QAAQS,WAAzD,EAAsEC,kBAAtE,EAA0FV,QAAQY,uBAAlG,CAAX;AACA;;AAED;AACA;AACA;AACA;AArCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsCCX,gBAAcC,OAAd,CAAsBC,IAAtB,CAA2BO,kBAA3B;AACA;;AAED;AACA;AACA;AACA;AACA,KAAIV,QAAQS,WAAR,KAAwB,KAAxB,IAAiCH,eAAe,KAApD,EACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,sBAAqBC,0BAA0BH,mBAA1B,EAA+CR,QAAQY,uBAAvD,CAA3B;;AAEA;AACA,qDAAqCX,aAArC;;AAEA;AACA;AACA;AAhBD;AAAA;AAAA;;AAAA;AAiBC,oDAAmB,8BAAgBA,aAAhB,CAAnB,iHACA;AAAA,QADWY,KACX;;AACC,QAAMC,gBAAe,0BAAYD,KAAZ,EAAkB,cAAlB,CAArB;;AAEA;;AAEA,QAAME,uBAAsBF,MAAKG,GAAL,CAASC,KAAT,CAAe,CAAf,EAAkBJ,MAAKG,GAAL,CAASE,OAAT,CAAiBJ,aAAjB,CAAlB,CAA5B;AACA,QAAMK,sBAAsBN,MAAKG,GAAL,CAASC,KAAT,CAAeJ,MAAKG,GAAL,CAASE,OAAT,CAAiBJ,aAAjB,IAAiC,CAAhD,CAA5B;;AAEA,QAAIC,qBAAoBK,MAApB,GAA6B,CAAjC,EACA;AACC,WAAM,IAAIC,KAAJ,CAAU,iEAAV,EAA6E,eAAKC,OAAL,CAAaT,KAAb,CAA7E,CAAN;AACA;;AAEDA,UAAKG,GAAL,GAAWO,6BAA6BJ,mBAA7B,EAAiDnB,QAAQS,WAAzD,EAAsEC,mBAAtE,EAA0FV,QAAQY,uBAAlG,CAAX;AACA;;AAED;AACA;AACA;AACA;AArCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsCCX,gBAAcC,OAAd,CAAsBC,IAAtB,CAA2BO,mBAA3B;AACA;;AAED;AACA,QAAOT,aAAP;AACA;;AAED;;;;AAIA,SAASU,yBAAT,CAAmCH,mBAAnC,EAAwDI,uBAAxD,EACA;AACC,KAAIA,uBAAJ,EACA;AACC,MAAMY,uBAAuBC,QAAQ,yBAAR,CAA7B;;AAEA,SAAO,IAAID,oBAAJ,CACN;AACA;AACA;AACAE,aAAWlB;AAHX,GADM,CAAP;AAMA;;AAED,KAAMmB,oBAAoBF,QAAQ,6BAAR,CAA1B;;AAEA;AACA;AACA;AACA,QAAO,IAAIE,iBAAJ,CACN;AACAD,YAAYlB,mBADZ;AAEAoB,aAAY;AAFZ,EADM,CAAP;AAKA;;AAED;;;;AAIA,SAASL,4BAAT,CAAsCJ,kBAAtC,EAA0DV,WAA1D,EAAuEC,kBAAvE,EAA2FE,uBAA3F,EACA;AACC,KAAIiB,4BAAJ;;AAEA,KAAIjB,uBAAJ,EACA;AACC,MAAMY,uBAAuBC,QAAQ,yBAAR,CAA7B;;AAEA,UAAQ;AACPK,WAAQN,qBAAqBM;AADtB,GAAR,0CAGGX,kBAHH;AAIA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAMY,qBAAqBrB,mBAAmBsB,OAAnB,CAC1B;AACAC,UAAYxB,cAAc,KAAd,GAAsB,IADlC;AAEA;AACA;AACA;AACAO,OAAYG;AALZ,EAD0B,CAA3B;;AASA;AACA;AACA,KAAIe,MAAMC,OAAN,CAAcJ,kBAAd,CAAJ,EACA;AACCF,wBAAsBE,kBAAtB;AACA,EAHD,MAKA;AACCF,wBACA,CAAC;AACAC,WAAQC;AADR,GAAD,CADA;AAIA;;AAED;AACA;AACA,KAAItB,WAAJ,EACA;AACC,UAAQ;AACPqB,WAAQ;AADD,GAAR,0CAGGD,mBAHH;AAIA;;AAED,QAAOA,mBAAP;AACA","file":"client configuration.js","sourcesContent":["import util from 'util'\r\n\r\nimport chunks_plugin from './chunks plugin'\r\nimport { clone, starts_with } from './helpers'\r\n\r\nimport\r\n{\r\n\tfind_loader,\r\n\tget_style_rules,\r\n\tnormalize_configuration_rule_loaders\r\n}\r\nfrom './loaders'\r\n\r\nexport default function client_configuration(webpack_configuration, settings, options = {})\r\n{\r\n\tconst configuration = clone(webpack_configuration)\r\n\r\n\tconfiguration.plugins = configuration.plugins || []\r\n\r\n\tconfiguration.plugins.push\r\n\t(\r\n\t\t// Add chunk filename info plugin\r\n\t\t//\r\n\t\t// Writes client-side build chunks filename info\r\n\t\t// for later use inside server-side rendering code\r\n\t\t// (`<script src=.../>` and `<link rel=\"style\" href=.../>` tags)\r\n\t\t//\r\n\t\t// Cloning Webpack configuration here\r\n\t\t// because `webpack-dev-server` seems to alter it\r\n\t\t// by changing the already predefined `.output.path`.\r\n\t\t//\r\n\t\tnew chunks_plugin(clone(configuration), { silent: settings.silent, chunk_info_filename: settings.chunk_info_filename })\r\n\t)\r\n\r\n\t// CSS bundle filename (if specified)\r\n\r\n\tconst css_bundle = options.css_bundle || options.cssBundle\r\n\r\n\tlet css_bundle_filename = '[name]-[contenthash].css'\r\n\r\n\tif (typeof css_bundle === 'string')\r\n\t{\r\n\t\tcss_bundle_filename = css_bundle\r\n\t}\r\n\r\n\t// If it's a client-side development webpack build,\r\n\t// and CSS bundle extraction is enabled,\r\n\t// then extract all CSS styles into a file.\r\n\t// (without removing them from the code)\r\n\tif (options.development && css_bundle)\r\n\t{\r\n\t\t// Extract styles into a file\r\n\t\t// (without removing them from the code in this case).\r\n\t\t//\r\n\t\t// It copies contents of each `require(\"style.css\")`\r\n\t\t// into one big CSS file on disk\r\n\t\t// which will be later read on the server-side\r\n\t\t// and inserted into `<head><style></style></head>`,\r\n\t\t// so that in development mode there's no\r\n\t\t// \"flash of unstyled content\" on page reload.\r\n\t\t//\r\n\t\tconst extract_css_plugin = create_extract_css_plugin(css_bundle_filename, options.useMiniCssExtractPlugin)\r\n\r\n\t\t// Normalize `modules.rules` loaders.\r\n\t\tnormalize_configuration_rule_loaders(configuration)\r\n\r\n\t\t// Find all rules using `style-loader`\r\n\t\t// and replace `style-loader` with `extract-text-webpack-plugin`\r\n\t\t// or `mini-css-extract-plugin` loader.\r\n\t\tfor (const rule of get_style_rules(configuration))\r\n\t\t{\r\n\t\t\tconst style_loader = find_loader(rule, 'style-loader')\r\n\r\n\t\t\tconst before_style_loader = rule.use.slice(0, rule.use.indexOf(style_loader))\r\n\t\t\tconst after_style_loader  = rule.use.slice(rule.use.indexOf(style_loader) + 1)\r\n\r\n\t\t\tif (before_style_loader.length > 0)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('No loaders can preceed `style-loader` in a Webpack module rule.', util.inspect(rule))\r\n\t\t\t}\r\n\r\n\t\t\trule.use = generate_extract_css_loaders(after_style_loader, options.development, extract_css_plugin, options.useMiniCssExtractPlugin)\r\n\t\t}\r\n\r\n\t\t// Add the `extract-text-webpack-plugin` or\r\n\t\t// `mini-css-extract-plugin` to the list of plugins.\r\n\t\t// It will extract all CSS into a file\r\n\t\t// (without removing it from the code in this case)\r\n\t\tconfiguration.plugins.push(extract_css_plugin)\r\n\t}\r\n\r\n\t// Use `extract-text-webpack-plugin`\r\n\t// or `mini-css-extract-plugin`\r\n\t// to extract all CSS into a separate file\r\n\t// (in production)\r\n\tif (options.development === false && css_bundle !== false)\r\n\t{\r\n\t\t// Extract styles into a file\r\n\t\t// (removing them from the code in this case).\r\n\t\t//\r\n\t\t// It moves contents of each `require(\"style.css\")`\r\n\t\t// into one big CSS file on disk\r\n\t\t// which will be later read on the server-side\r\n\t\t// and inserted into `<head><style></style></head>`.\r\n\t\t//\r\n\t\tconst extract_css_plugin = create_extract_css_plugin(css_bundle_filename, options.useMiniCssExtractPlugin)\r\n\r\n\t\t// Normalize `modules.rules` loaders.\r\n\t\tnormalize_configuration_rule_loaders(configuration)\r\n\r\n\t\t// Find module loaders with `style-loader`,\r\n\t\t// and set those module loaders to `extract-text-webpack-plugin`\r\n\t\t// or `mini-css-extract-plugin` loader\r\n\t\tfor (const rule of get_style_rules(configuration))\r\n\t\t{\r\n\t\t\tconst style_loader = find_loader(rule, 'style-loader')\r\n\r\n\t\t\t// const style_loader_and_before = rule.use.slice(0, rule.use.indexOf(style_loader) + 1)\r\n\r\n\t\t\tconst before_style_loader = rule.use.slice(0, rule.use.indexOf(style_loader))\r\n\t\t\tconst after_style_loader  = rule.use.slice(rule.use.indexOf(style_loader) + 1)\r\n\r\n\t\t\tif (before_style_loader.length > 0)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('No loaders can preceed `style-loader` in a Webpack module rule.', util.inspect(rule))\r\n\t\t\t}\r\n\r\n\t\t\trule.use = generate_extract_css_loaders(after_style_loader, options.development, extract_css_plugin, options.useMiniCssExtractPlugin)\r\n\t\t}\r\n\r\n\t\t// Add the `extract-text-webpack-plugin` or\r\n\t\t// `mini-css-extract-plugin` to the list of plugins.\r\n\t\t// It will extract all CSS into a file\r\n\t\t// (removing it from the code in this case)\r\n\t\tconfiguration.plugins.push(extract_css_plugin)\r\n\t}\r\n\r\n\t// Done\r\n\treturn configuration\r\n}\r\n\r\n/**\r\n * Creates an instance of plugin for extracting styles in a file.\r\n * Either `extract-text-webpack-plugin` or `mini-css-extract-plugin`.\r\n */\r\nfunction create_extract_css_plugin(css_bundle_filename, useMiniCssExtractPlugin)\r\n{\r\n\tif (useMiniCssExtractPlugin)\r\n\t{\r\n\t\tconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\r\n\r\n\t\treturn new MiniCssExtractPlugin\r\n\t\t({\r\n\t\t\t// Options similar to the same options in webpackOptions.output\r\n\t\t\t// both options are optional\r\n\t\t\tfilename : css_bundle_filename\r\n\t\t})\r\n\t}\r\n\r\n\tconst ExtractTextPlugin = require('extract-text-webpack-plugin')\r\n\r\n\t// \"allChunks: true\" option means that the styles from all chunks\r\n\t// (think \"entry points\") will be extracted into a single big CSS file.\r\n\t//\r\n\treturn new ExtractTextPlugin\r\n\t({\r\n\t\tfilename  : css_bundle_filename,\r\n\t\tallChunks : true\r\n\t})\r\n}\r\n\r\n/**\r\n * Generates rule.use loaders for extracting styles in a file.\r\n * Either for `extract-text-webpack-plugin` or `mini-css-extract-plugin`.\r\n */\r\nfunction generate_extract_css_loaders(after_style_loader, development, extract_css_plugin, useMiniCssExtractPlugin)\r\n{\r\n\tlet extract_css_loaders\r\n\r\n\tif (useMiniCssExtractPlugin)\r\n\t{\r\n\t\tconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\r\n\r\n\t\treturn [{\r\n\t\t\tloader: MiniCssExtractPlugin.loader\r\n\t\t},\r\n\t\t...after_style_loader]\r\n\t}\r\n\r\n\t// The first argument to the .extract() function is the name of the loader\r\n\t// (\"style-loader\" in this case) to be applied to non-top-level-chunks in case of \"allChunks: false\" option.\r\n\t// since in this configuration \"allChunks: true\" option is used, this first argument is irrelevant.\r\n\t//\r\n\t// `remove: false` ensures that the styles being extracted\r\n\t// aren't erased from the chunk javascript file.\r\n\t//\r\n\tconst extract_css_loader = extract_css_plugin.extract\r\n\t({\r\n\t\tremove    : development ? false : true,\r\n\t\t// `fallback` option is not really being used\r\n\t\t// because `allChunks: true` option is used.\r\n\t\t// fallback  : before_style_loader,\r\n\t\tuse       : after_style_loader\r\n\t})\r\n\r\n\t// Workaround for an old bug, may be obsolete now.\r\n\t// https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/368\r\n\tif (Array.isArray(extract_css_loader))\r\n\t{\r\n\t\textract_css_loaders = extract_css_loader\r\n\t}\r\n\telse\r\n\t{\r\n\t\textract_css_loaders =\r\n\t\t[{\r\n\t\t\tloader: extract_css_loader\r\n\t\t}]\r\n\t}\r\n\r\n\t// I'm also prepending another `style-loader` here\r\n\t// to re-enable adding these styles to the <head/> of the page on-the-fly.\r\n\tif (development)\r\n\t{\r\n\t\treturn [{\r\n\t\t\tloader: 'style-loader'\r\n\t\t},\r\n\t\t...extract_css_loaders]\r\n\t}\r\n\r\n\treturn extract_css_loaders\r\n}"]}