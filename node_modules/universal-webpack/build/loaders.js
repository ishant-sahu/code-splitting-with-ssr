'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.get_style_rules = get_style_rules;
exports.is_style_rule = is_style_rule;
exports.parse_loader = parse_loader;
exports.stringify_loader = stringify_loader;
exports.find_loader = find_loader;
exports.normalize_configuration_rule_loaders = normalize_configuration_rule_loaders;
exports.normalize_rule_loaders = normalize_rule_loaders;

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// https://webpack.js.org/configuration/module/

// Finds module rules with `style-loader`.
// If a rule has `oneOf` then a branch of `oneOf` is returned.
//
// `configuration` rule loaders must already be normalized.
//
function get_style_rules(configuration) {
	// Sanity check
	if (!configuration.module.rules) {
		throw new Error('No `module.rules` found in Webpack configuration. Migrate your configuration to Webpack 2: https://webpack.js.org/guides/migrating/');
	}

	var style_rules = [];

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = (0, _getIterator3.default)(configuration.module.rules), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var rule = _step.value;

			// Recurse into `oneOf`.
			// https://webpack.js.org/configuration/module/#rule-oneof
			if (rule.oneOf) {
				var _iteratorNormalCompletion2 = true;
				var _didIteratorError2 = false;
				var _iteratorError2 = undefined;

				try {
					for (var _iterator2 = (0, _getIterator3.default)(rule.oneOf), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
						var subrule = _step2.value;

						if (is_style_rule(subrule)) {
							style_rules.push(subrule);
						}
					}
				} catch (err) {
					_didIteratorError2 = true;
					_iteratorError2 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion2 && _iterator2.return) {
							_iterator2.return();
						}
					} finally {
						if (_didIteratorError2) {
							throw _iteratorError2;
						}
					}
				}

				continue;
			}

			if (is_style_rule(rule)) {
				style_rules.push(rule);
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return style_rules;
}

// `rule` must already be normalized
function is_style_rule(rule) {
	// Check if this module loader has a `style-loader`
	var style_loader = find_loader(rule, 'style-loader');

	// Is it `extract-text-webpack-plugin` loader
	// (the regular expression is a filesystem path
	//  which is `.../extract-text-webpack-plugin/loader.js` for v2
	//  and `.../extract-text-webpack-plugin/dist/loader.js` for v3)
	var extract_text_plugin_loader = rule.use.filter(function (loader) {
		return (/extract-text-webpack-plugin/.test(loader.loader)
		);
	})[0];

	return style_loader && !extract_text_plugin_loader;
}

// Converts loader string into a Webpack 2 loader structure
function parse_loader(loader) {
	var name = void 0;
	var options = void 0;

	if ((0, _helpers.is_object)(loader)) {
		if (!loader.loader) {
			throw new Error('.loader not set for a used loader');
		}

		var parsed = parse_loader(loader.loader);

		name = parsed.loader;
		options = parsed.options || loader.query || loader.options;

		if (typeof options === 'string') {
			options = _querystring2.default.parse(options);
		}
	} else {
		name = loader;

		if (name.indexOf('?') >= 0) {
			name = name.substring(0, name.indexOf('?'));
			options = _querystring2.default.parse(loader.substring(loader.indexOf('?') + 1));
		}
	}

	var result = {
		loader: name
	};

	if (options) {
		result.options = options;
	}

	return result;
}

// Converts loader info into a string
function stringify_loader(loader) {
	return loader.loader + (loader.options ? '?' + _querystring2.default.stringify(loader.options) : '');
}

// Checks if the passed loader is `loader_name`.
function find_loader(rule, loader_name) {
	return rule.use.filter(function (_) {
		return _.loader === loader_name;
	})[0];
}

// Converts `loader` to `loaders`
function normalize_configuration_rule_loaders(configuration) {
	var _iteratorNormalCompletion3 = true;
	var _didIteratorError3 = false;
	var _iteratorError3 = undefined;

	try {
		for (var _iterator3 = (0, _getIterator3.default)(configuration.module.rules), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
			var rule = _step3.value;

			normalize_rule_loaders(rule);
		}
	} catch (err) {
		_didIteratorError3 = true;
		_iteratorError3 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion3 && _iterator3.return) {
				_iterator3.return();
			}
		} finally {
			if (_didIteratorError3) {
				throw _iteratorError3;
			}
		}
	}
}

// Converts `loader` to `loaders`
function normalize_rule_loaders(rule) {
	// Recurse into `oneOf`.
	// https://webpack.js.org/configuration/module/#rule-oneof
	if (rule.oneOf) {
		var _iteratorNormalCompletion4 = true;
		var _didIteratorError4 = false;
		var _iteratorError4 = undefined;

		try {
			for (var _iterator4 = (0, _getIterator3.default)(rule.oneOf), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
				var subrule = _step4.value;

				if (!subrule.use) {
					throw new Error('A "oneOf" subrule must have "use" property.', _util2.default.inspect(subrule));
				}

				normalize_rule_loaders(subrule);
			}
		} catch (err) {
			_didIteratorError4 = true;
			_iteratorError4 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion4 && _iterator4.return) {
					_iterator4.return();
				}
			} finally {
				if (_didIteratorError4) {
					throw _iteratorError4;
				}
			}
		}

		return;
	}

	// Convert `loaders` to `use`
	if (rule.loaders) {
		rule.use = rule.loaders;
		delete rule.loaders;
	}

	// If a `loader` shorthand is used, convert it to `use`
	if (rule.loader) {
		var loaders = rule.loader.split('!');

		if (rule.query || rule.options) {
			var parsed_loader = parse_loader(loaders[0]);

			if (loaders.length > 1 || parsed_loader.options) {
				throw new Error('You have both a compound ".loader" and a ".query" (or an ".options") property set up directly inside a module rule: ' + _util2.default.inspect(rule) + '. Rewrite it either using ".loaders" or ".use".');
			}

			loaders = [parsed_loader];

			parsed_loader.options = rule.query || rule.options;
			delete rule.query;
			delete rule.options;
		}

		rule.use = loaders;
		delete rule.loader;
	}

	if (!rule.use) {
		throw new Error('Neither "loaders" nor "loader" nor "use" nor "oneOf" are present inside a module rule: ' + _util2.default.inspect(rule));
	}

	if (typeof rule.use === 'string') {
		rule.use = [rule.use];
	}

	if (!Array.isArray(rule.use)) {
		throw new Error('Invalid Webpack configuration: "rule.use" must be an array:\n\n' + (0, _stringify2.default)(rule, null, 2) + '\n\nSee https://webpack.js.org/configuration/module/#rule-use');
	}

	rule.use = rule.use.map(parse_loader);
}
//# sourceMappingURL=loaders.js.map