'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

exports.default = server_configuration;
exports.is_external = is_external;
exports.dont_emit_file_loader = dont_emit_file_loader;
exports.replace_style_loader = replace_style_loader;
exports.extract_package_name = extract_package_name;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _validateNpmPackageName = require('validate-npm-package-name');

var _validateNpmPackageName2 = _interopRequireDefault(_validateNpmPackageName);

var _helpers = require('./helpers');

var _loaders = require('./loaders');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Tunes the client-side Webpack configuration for server-side build
function server_configuration(webpack_configuration, settings) {
	// if (!webpack_configuration.context)
	// {
	// 	throw new Error(`You must set "context" parameter in your Webpack configuration`)
	// }

	var configuration = (0, _helpers.clone)(webpack_configuration);

	// By default, Webpack sets `context` to `process.cwd()`
	configuration.context = configuration.context || process.cwd();

	// (without extension)
	var output_file_name = _path2.default.basename(settings.server.output, _path2.default.extname(settings.server.output));

	configuration.entry = (0, _defineProperty3.default)({}, output_file_name, settings.server.input);

	// https://webpack.github.io/docs/configuration.html#target
	configuration.target = 'node';

	// Tell Webpack to leave `__dirname` and `__filename` unchanged
	// https://github.com/webpack/webpack/issues/1599#issuecomment-186841345
	configuration.node = configuration.node || {};
	configuration.node.__dirname = false;
	configuration.node.__filename = false;

	// https://webpack.github.io/docs/configuration.html#output-librarytarget
	configuration.output.libraryTarget = 'commonjs2';

	// No need for browser cache management, so disable hashes in filenames
	configuration.output.filename = '[name].js';
	configuration.output.chunkFilename = '[name].js';

	// Include comments with information about the modules.
	// require(/* ./test */23).
	// What for is it here? I don't know. It's a copy & paste from the Webpack author's code.
	configuration.output.pathinfo = true;

	// Output server bundle into its own directory
	configuration.output.path = _path2.default.resolve(configuration.context, _path2.default.dirname(settings.server.output));

	// Output "*.map" file for human-readable stack traces
	configuration.devtool = 'source-map';

	// https://webpack.github.io/docs/configuration.html#externals
	//
	// `externals` allows you to specify dependencies for your library
	// that are not resolved by webpack, but become dependencies of the output.
	// This means they are imported from the environment during runtime.
	//
	// So that Webpack doesn't bundle "node_modules" into server.js.

	configuration.externals = configuration.externals || [];

	if (!Array.isArray(configuration.externals)) {
		configuration.externals = [configuration.externals];
	}

	configuration.externals.push(function (context, request, callback) {
		if (is_external(request, configuration, settings)) {
			// Resolve dependency as external
			return callback(null, request);
		}

		// Resolve dependency as non-external
		return callback();
	});

	// Normalize `modules.rules` loaders.
	(0, _loaders.normalize_configuration_rule_loaders)(configuration);

	// Replace `style-loader` and `css-loader` with `css-loader/locals`
	// since it's no web browser and no files will be emitted.
	replace_style_loader(configuration);

	// Add `emit: false` flag to `file-loader` and `url-loader`,
	// since there's no need out emit files on the server side
	// (can just use the assets emitted on client build
	//  since the filenames are the same)
	dont_emit_file_loader(configuration);

	configuration.plugins = configuration.plugins || [];

	// Remove HotModuleReplacementPlugin and CommonsChunkPlugin
	configuration.plugins = configuration.plugins.filter(function (plugin) {
		try {
			if (plugin.constructor === _webpack2.default.optimize.CommonsChunkPlugin) {
				return false;
			}
		} catch (error) {
			// Webpack 4 throws `RemovedPluginError`.
		}

		return plugin.constructor !== _webpack2.default.HotModuleReplacementPlugin;
	});

	// Add a couple of utility plugins
	configuration.plugins = configuration.plugins.concat(
	// Resorted from using it here because
	// if the `build/server` folder is not there
	// when Nodemon starts then it simply won't detect
	// updates of the server-side bundle
	// and therefore won't restart on code changes.
	//
	// `build/server` folder needs to be present
	// by the time Nodemon starts,
	// and that's accomplished with a separate npm script.

	// // Cleans the output folder
	// new clean_plugin([path.dirname(settings.server.output)],
	// {
	// 	root: configuration.context
	// }),

	// Put the resulting Webpack compiled code into a sigle javascript file
	// (doesn't disable CommonsChunkPlugin)
	new _webpack2.default.optimize.LimitChunkCountPlugin({ maxChunks: 1 }));

	// Done
	return configuration;
}

// Checks if a require()d dependency is external.
// Could also use https://www.npmjs.com/package/webpack-node-externals.
// Still the self-made alias-aware solution works ok.
function is_external(request, webpack_configuration, settings) {
	// If someone finds a way to mark all assets (jpg, png, css, scss)
	// as not external then create a Pull Request on github.
	// Until then, all assets from `node_modules` have to be specified
	// inside `exclude_from_externals` configuration parameter.

	// Mark all files inside packages (e.g. `node_modules`) as external.

	var package_name = extract_package_name(request);

	// Skip webpack loader specific require()d paths
	// https://webpack.github.io/docs/loaders.html
	if ((0, _helpers.starts_with)(package_name, '!') || (0, _helpers.starts_with)(package_name, '-!')) {
		// The dependency is not external
		return false;
	}

	// If it's not a module require call,
	// then resolve it as non-external.
	//
	// https://github.com/npm/validate-npm-package-name
	//
	if (!(0, _validateNpmPackageName2.default)(package_name).validForNewPackages) {
		// The dependency is not external
		return false;
	}

	// If any aliases are specified, then resolve those aliases as non-external
	if (webpack_configuration.resolve && webpack_configuration.resolve.alias) {
		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(webpack_configuration.resolve.alias)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var alias = _step.value;

				// if (request === key || starts_with(request, key + '/'))
				if (package_name === alias) {
					// The module is not external
					return false;
				}
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}
	}

	// Allows camelCasing
	var exclude_from_externals_extensions = settings.load_external_module_file_extensions || settings.loadExternalModuleFileExtensions || ['css', 'png', 'jpg', 'svg', 'xml'];

	// Assets are being exluded from externals
	// because they need loaders in order to be `require()`d.
	var extname = _path2.default.extname(request);
	if (extname) {
		var extension = extname.slice(1);

		if (extension) {
			if (exclude_from_externals_extensions.indexOf(extension) >= 0) {
				// "The module is not external"
				// (which means "load this module with a special loader")
				return false;
			}
		}
	}

	// Allows camelCasing
	var exclude_from_externals = settings.exclude_from_externals || settings.excludeFromExternals;

	// Skip modules explicitly ignored by the user
	if (exclude_from_externals) {
		var _iteratorNormalCompletion2 = true;
		var _didIteratorError2 = false;
		var _iteratorError2 = undefined;

		try {
			for (var _iterator2 = (0, _getIterator3.default)(exclude_from_externals), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
				var exclusion_pattern = _step2.value;

				if (typeof exclusion_pattern === 'string') {
					if (request === exclusion_pattern || (0, _helpers.starts_with)(request, exclusion_pattern + '/')) {
						// The module is not external
						return false;
					}
				} else if (exclusion_pattern instanceof RegExp) {
					if (exclusion_pattern.test(request)) {
						// The module is not external
						return false;
					}
				} else {
					throw new Error('Invalid exclusion pattern: ' + exclusion_pattern + '. Only strings and regular expressions are allowed.');
				}
			}
		} catch (err) {
			_didIteratorError2 = true;
			_iteratorError2 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion2 && _iterator2.return) {
					_iterator2.return();
				}
			} finally {
				if (_didIteratorError2) {
					throw _iteratorError2;
				}
			}
		}
	}

	// The module is external
	return true;
}

// Adds `emitFile: false` flag to `file-loader` and `url-loader`,
// since there's no need out emit files on the server side
// (can just use the assets emitted on client build
//  since the filenames are the same)
function dont_emit_file_loader(configuration) {
	var _iteratorNormalCompletion3 = true;
	var _didIteratorError3 = false;
	var _iteratorError3 = undefined;

	try {
		for (var _iterator3 = (0, _getIterator3.default)(configuration.module.rules), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
			var rule = _step3.value;

			if (rule.oneOf) {
				var _iteratorNormalCompletion4 = true;
				var _didIteratorError4 = false;
				var _iteratorError4 = undefined;

				try {
					for (var _iterator4 = (0, _getIterator3.default)(rule.oneOf), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
						var subrule = _step4.value;

						_dont_emit_file_loader(subrule);
					}
				} catch (err) {
					_didIteratorError4 = true;
					_iteratorError4 = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion4 && _iterator4.return) {
							_iterator4.return();
						}
					} finally {
						if (_didIteratorError4) {
							throw _iteratorError4;
						}
					}
				}

				continue;
			}

			_dont_emit_file_loader(rule);
		}
	} catch (err) {
		_didIteratorError3 = true;
		_iteratorError3 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion3 && _iterator3.return) {
				_iterator3.return();
			}
		} finally {
			if (_didIteratorError3) {
				throw _iteratorError3;
			}
		}
	}
}

// Adds `emitFile: false` flag to `file-loader` and `url-loader`,
// since there's no need out emit files on the server side
// (can just use the assets emitted on client build
//  since the filenames are the same)
function _dont_emit_file_loader(rule) {
	var file_loader = (0, _loaders.find_loader)(rule, 'file-loader');
	var url_loader = (0, _loaders.find_loader)(rule, 'url-loader');

	if (file_loader && url_loader) {
		throw new Error('You have both "url-loader" and "file-loader" defined for rule which makes no sense', _util2.default.inspect(rule));
	}

	var loader = file_loader || url_loader;

	if (loader) {
		loader.options = (0, _extends3.default)({}, loader.options, {
			emitFile: false
		});
	}
}

// Replaces `style-loader` and `css-loader` with `css-loader/locals`
// since it's no web browser and no files will be emitted.
function replace_style_loader(configuration) {
	var _iteratorNormalCompletion5 = true;
	var _didIteratorError5 = false;
	var _iteratorError5 = undefined;

	try {
		for (var _iterator5 = (0, _getIterator3.default)((0, _loaders.get_style_rules)(configuration)), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
			var rule = _step5.value;

			var css_loader = (0, _loaders.find_loader)(rule, 'css-loader');

			if (css_loader) {
				// Replace `css-loader` with `css-loader/locals`.
				// Also there's a stupid difference between `css-loader@2` and `css-loader@1`:
				// https://github.com/catamphetamine/universal-webpack/issues/101
				if (process.env.UNIVERSAL_WEBPACK_CSS_LOADER_V2) {
					css_loader.options = (0, _extends3.default)({}, css_loader.options, {
						exportOnlyLocals: true
					});
				} else {
					css_loader.loader = 'css-loader/locals';
				}
				// Drop `style-loader`.
				rule.use = rule.use.filter(function (loader) {
					return loader.loader !== 'style-loader';
				});
			}
		}
	} catch (err) {
		_didIteratorError5 = true;
		_iteratorError5 = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion5 && _iterator5.return) {
				_iterator5.return();
			}
		} finally {
			if (_didIteratorError5) {
				throw _iteratorError5;
			}
		}
	}
}

// Extracts npm package name.
// Correctly handles "private" npm packages like `@namespace/package`.
function extract_package_name(path) {
	if (path.indexOf('/') === -1) {
		return path;
	}

	// For regular npm packages
	var package_name = path.slice(0, path.indexOf('/'));

	// Handle "private" npm packages
	if (package_name[0] === '@') {
		var start_from = package_name.length + '/'.length;
		var to = path.indexOf('/', start_from);

		if (to >= 0) {
			package_name += path.slice(start_from - '/'.length, to);
		} else {
			package_name = path;
		}
	}

	return package_name;
}
//# sourceMappingURL=server configuration.js.map